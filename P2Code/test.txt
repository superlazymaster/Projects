// Test Case 2: Subtract 0 - 0
set a %B0000000000,
set b %B0000000000,
set sub 1,
eval,
output;

// Test Case 3: Add 10 + 5
set a %B0000101010,  // 10 in 2's complement
set b %B0000000101,  // 5 in 2's complement
set sub 0,           // Add
eval,
output;

// Test Case 4: Subtract 10 - 5
set a %B0000101010,  // 10 in 2's complement
set b %B0000000101,  // 5 in 2's complement
set sub 1,           // Subtract
eval,
output;

// Test Case 5: Add -3 + 7
set a %B1111111101,  // -3 in 2's complement
set b %B0000000111,  // 7 in 2's complement
set sub 0,           // Add
eval,
output;

// Test Case 6: Subtract -3 - 7
set a %B1111111101,  // -3 in 2's complement
set b %B0000000111,  // 7 in 2's complement
set sub 1,           // Subtract
eval,
output;

// Test Case 7: Add Max positive value + 1 (Overflow)
set a %B0111111111,  // Max positive value (511)
set b %B0000000001,  // 1 in 2's complement
set sub 0,           // Add
eval,
output;

// Test Case 8: Subtract Max negative value - 1
set a %B1000000000,  // Max negative value (-512)
set b %B0000000001,  // 1 in 2's complement
set sub 1,           // Subtract
eval,
output;

// Test Case 9: Add -128 + -128 (Checking for overflow)
set a %B1111111110,  // -2 in 2's complement
set b %B1111111110,  // -2 in 2's complement
set sub 0,           // Add
eval,
output;

// Test Case 10: Subtract 15 - (-15) (Testing signed subtraction)
set a %B0000001111,  // 15 in 2's complement
set b %B1111110001,  // -15 in 2's complement
set sub 1,           // Subtract
eval,
output;



| 0000000000 | 0000000000 | 1 | 0000000000 |    0    | 
| 0000101010 | 0000000101 | 0 | 0000001111 |    0    | 
| 0000101010 | 0000000101 | 1 | 0000100101 |    0    | 
| 1111111101 | 0000000111 | 0 | 0000000100 |    0    | 
| 1111111101 | 0000000111 | 1 | 1111110110 |    0    | 
| 0111111111 | 0000000001 | 0 | 1000000000 |    1    | 
| 1000000000 | 0000000001 | 1 | 0111111111 |    0    | 
| 1111111110 | 1111111110 | 0 | 1111111100 |    0    | 
| 0000001111 | 1111110001 | 1 | 0000011110 |    0    | 
